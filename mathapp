import streamlit as st
from sympy import symbols, simplify, factor, diff, integrate, solve, sympify
from sympy import sin, cos, tan, log, exp, sqrt
import re

# --- App Title ---
st.set_page_config(page_title="Math Solver App", page_icon="üßÆ")
st.title("üßÆ Math Solver App")
st.write("Solve, simplify, factor, derive, or integrate math expressions easily.")

# --- Select Operation ---
operation = st.selectbox(
    "Choose the type of math operation:",
    ("Simplify", "Factor", "Solve Equation", "Derivative", "Integral")
)

# --- Input Expression ---
expr_input = st.text_input("Enter your math expression (e.g., 3*x^3 + 2*x or sin(x)):", "")

# --- Variable for calculus or equations ---
var_input = st.text_input("Enter the variable (e.g., x):", "x")

# --- Preprocess function ---
def preprocess_expression(expr):
    # Convert ^ to ** for Python
    expr = expr.replace('^', '**')
    
    # Insert * only between number and variable (e.g., 3x -> 3*x)
    expr = re.sub(r'(\d)([a-zA-Z(])', r'\1*\2', expr)
    
    # **Do not touch function names** like sin, cos, log, etc.
    return expr

# --- Solve Button ---
if st.button("Solve"):
    try:
        # Preprocess input
        expr_input_fixed = preprocess_expression(expr_input)

        # Create symbol
        var = symbols(var_input)

        # Define allowed functions for sympify
        allowed_functions = {
            "sin": sin, "cos": cos, "tan": tan, 
            "log": log, "exp": exp, "sqrt": sqrt,
            var_input: var
        }

        # Convert string to sympy expression safely
        expr = sympify(expr_input_fixed, locals=allowed_functions)

        # Perform operation
        if operation == "Simplify":
            result = simplify(expr)
        elif operation == "Factor":
            result = factor(expr)
        elif operation == "Derivative":
            result = diff(expr, var)
        elif operation == "Integral":
            result = integrate(expr, var)
        elif operation == "Solve Equation":
            result = solve(expr, var)
        else:
            result = "Invalid operation"

        st.success(f"‚úÖ Result: {result}")

    except Exception as e:
        st.error(f"‚ùå Error: {e}")
